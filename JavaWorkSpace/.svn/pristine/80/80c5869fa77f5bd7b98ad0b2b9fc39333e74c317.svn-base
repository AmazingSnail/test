package com.dhchain.business.HeatTreatment.controller;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.dhchain.business.HeatTreatment.service.MCraftparamService;
import com.dhchain.business.HeatTreatment.service.ProductionProcessService;
import com.dhchain.business.HeatTreatment.vo.*;
import com.dhchain.util.StringUtil;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.method.P;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import tk.mybatis.mapper.entity.Example;

import javax.servlet.http.HttpServletRequest;
import java.io.UnsupportedEncodingException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
/**
 * Created by ASUS on 2018/7/6.
 */
@Controller
@RequestMapping(value = "/ProductionProcess")
public class ProductionProcessController {
    @Autowired
    private ProductionProcessService productionProcessService;
    @Autowired
    private MCraftparamService mCraftparamService;
    @ResponseBody
    @RequestMapping(value="/query",method={RequestMethod.GET, RequestMethod.POST})
    public Map Query (HttpServletRequest request) throws UnsupportedEncodingException {
        request.setCharacterEncoding("utf-8");
        Map json = new HashMap();
        String plant = request.getParameter("plant");
        String PartDrawing = request.getParameter("PartDrawing");
        String PartName = request.getParameter("PartName");
        String matail = request.getParameter("matail");
        String MBMC = request.getParameter("MBMC");
        ProductionProcess productionProcess = new ProductionProcess();
        productionProcess.setPlant(plant);
        productionProcess.setPartdrawing(PartDrawing);
        productionProcess.setPartname(PartName);
        productionProcess.setMaterial(matail);
        productionProcess.setTempletnum(MBMC);
        List<ProductionProcess> list = productionProcessService.getData(productionProcess);
        if(list.size()>0){
            json.put("rows",list);
            json.put("total",list.size());
        }
        return  json;
    }

    @ResponseBody
    @RequestMapping(value="/Juge",method={RequestMethod.GET, RequestMethod.POST})
    public Map Juge (HttpServletRequest request) throws UnsupportedEncodingException {
        request.setCharacterEncoding("utf-8");
        Map json = new HashMap();
        String partDrawing = request.getParameter("partDrawing");
        Example example = new Example(MCraftparam.class);
        Example.Criteria criteria = example.createCriteria();
       if(tk.mybatis.mapper.util.StringUtil.isNotEmpty(partDrawing)) {
            criteria.andEqualTo("partdrawing",partDrawing.trim());
        }
        List<MCraftparam> list = mCraftparamService.selectByExample(example);
       if(list.size()>0){
           json.put("num",list.size());
       }else {
           json.put("num",-1);
       }
        return  json;
    }
    @ResponseBody
    @RequestMapping(value="/getMB",method={RequestMethod.GET, RequestMethod.POST})
    public JSON GetMB (HttpServletRequest request) throws UnsupportedEncodingException {
        request.setCharacterEncoding("utf-8");

        JSONArray jslist = new JSONArray();
        String plant = request.getParameter("plant");
        MCraftmould mCraftmould = new MCraftmould();
        mCraftmould.setPlant(plant);
        List<MCraftmould> list = productionProcessService.getTempletname(mCraftmould);
        if(list.size()>0){
            for(int i = 0 ;i<list.size();i++){
                Map re = new HashMap();
                MCraftmould mCraftmould1 = list.get(i);
                String templetname =  mCraftmould1.getTempletname();
                re.put("templetname",templetname);
                jslist.add(re);

            }
        }
        return  jslist;
    }
    @ResponseBody
    @RequestMapping(value="/getTempletnum",method={RequestMethod.GET, RequestMethod.POST})
    public Map GetTempletnum (HttpServletRequest request) throws UnsupportedEncodingException {
        request.setCharacterEncoding("utf-8");

        JSONObject re1 = new JSONObject();
        String templetname = request.getParameter("templetname");
        String plant = request.getParameter("plant");
        MCraftmould mCraftmould = new MCraftmould();
        mCraftmould.setTempletname(templetname);
        mCraftmould.setPlant(plant);
        List<MCraftmould> list = productionProcessService.getTempletnum(mCraftmould);
        if(list.size()>0){
            for(MCraftmould i : list){
                MCraftmould mCraftmould1 = i;
                String Templetnum = mCraftmould1.getTempletnum();
                String QuenchTemp1 = mCraftmould1.getQuenchtemp1();
                String QuenchTemp2 = mCraftmould1.getQuenchtemp2();
                String QuenchTemp3 = mCraftmould1.getQuenchtemp3();
                String QuenchTemp4 = mCraftmould1.getQuenchtemp4();
                String QuenchTemp5 = mCraftmould1.getQuenchtemp5();
                String QuenchTime = mCraftmould1.getQuenchtime();
                String CoolTemp = mCraftmould1.getCooltemp();
                String Carpotential = mCraftmould1.getCarpotential();
                String Coating = mCraftmould1.getCoating();
                String QuenchHard =mCraftmould1.getQuenchhard();
                String TemperTemp = mCraftmould1.getTempertemp();
                String CarbinolF = mCraftmould1.getCarbinolf();
                String TemperHard = mCraftmould1.getTemperhard();
                String TemperTime = mCraftmould1.getTempertime();
                re1.put("Templetnum",Templetnum);
                re1.put("QuenchTemp1",QuenchTemp1+"  "+ "°C");
                re1.put("QuenchTemp2",QuenchTemp2+"  "+ "°C");
                re1.put("QuenchTemp3",QuenchTemp3+"  "+ "°C");
                re1.put("QuenchTemp4",QuenchTemp4+"  "+ "°C");
                re1.put("QuenchTemp5",QuenchTemp5+"  "+ "°C");
                re1.put("QuenchTime",QuenchTime+"  "+ "min");
                re1.put("CoolTemp",CoolTemp+"  "+ "°C");
                re1.put("Carpotential",Carpotential+"  "+ "°C");
                re1.put("Coating",Coating+"  "+ "min");
                re1.put("QuenchHard",QuenchHard+"  "+ "HRC");
                re1.put("TemperTemp",TemperTemp+"  "+ "°C");
                re1.put("CarbinolF",CarbinolF+"  "+ "L/h");
                re1.put("TemperHard",TemperHard+"  "+ "HRC");
                re1.put("TemperTime",TemperTime+"  "+ "min");
            }
        }
        return  re1;
    }
   @ResponseBody
   @RequestMapping(value = "/Insert",method={RequestMethod.GET, RequestMethod.POST})
    public Map Insert(HttpServletRequest request) throws UnsupportedEncodingException {
        Map json = new HashMap();
        request.setCharacterEncoding("utf-8");
        String plant = request.getParameter("plant");
        String time = request.getParameter("time");
        String name = request.getParameter("name");
        String partDrawing = request.getParameter("partDrawing");
        String partname = request.getParameter("partname");
        String MBid = request.getParameter("MBid");
        String MBname = request.getParameter("MBname");
        String ids = request.getParameter("ids");
        MCraftparam mCraftparam = new MCraftparam();
        mCraftparam.setPartdrawing(partDrawing);
        mCraftparam.setPartname(partname);
        mCraftparam.setPlant(plant);
        mCraftparam.setTempletname(MBname);
        mCraftparam.setTempletnum(MBid);
        if(StringUtil.isEmpty(ids)){
            mCraftparam.setInputman(name);
            mCraftparam.setInputtime(time);
            int n = mCraftparamService.InsertUseGeneratedKeysMapper(mCraftparam);
            if(n>0){
                json.put("num",1);
            }else {
                json.put("num",0);
            }
        }else {
            mCraftparam.setId(Integer.parseInt(ids));
            mCraftparam.setModifyman(name);
            mCraftparam.setModifytime(time);
            int n = mCraftparamService.updateNotNull(mCraftparam);
            if(n>0){
                json.put("num",1);
            }else {
                json.put("num",0);
            }
        }
        return json;
   }
   @ResponseBody
    @RequestMapping(value = "/Deletedata",method={RequestMethod.GET, RequestMethod.POST})
   public Map Deletedata(HttpServletRequest request) throws UnsupportedEncodingException {
    Map json = new HashMap();
    request.setCharacterEncoding("utf-8");
    String id = request.getParameter("id");
    int n = mCraftparamService.deleteByPrimaryKey(Integer.parseInt(id));
       if(n>0){
           json.put("num",n);
       }else {
           json.put("num",-1);
       }
    return  json;
    }
}
